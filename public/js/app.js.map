{"version":3,"sources":["jQuery.print.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["/* @license \n * jQuery.print, version 1.5.1\n *  (c) Sathvik Ponangi, Doers' Guild\n * Licence: CC-By (http://creativecommons.org/licenses/by/3.0/)\n *--------------------------------------------------------------------------*/\n(function ($) {\n    \"use strict\";\n    // A nice closure for our definitions\n    function getjQueryObject(string) {\n        // Make string a vaild jQuery thing\n        var jqObj = $(\"\");\n        try {\n            jqObj = $(string)\n                .clone();\n        } catch (e) {\n            jqObj = $(\"<span />\")\n                .html(string);\n        }\n        return jqObj;\n    }\n\n    function printFrame(frameWindow, content, options) {\n        // Print the selected window/iframe\n        var def = $.Deferred();\n        try {\n            frameWindow = frameWindow.contentWindow || frameWindow.contentDocument || frameWindow;\n            var wdoc = frameWindow.document || frameWindow.contentDocument || frameWindow;\n            if(options.doctype) {\n                wdoc.write(options.doctype);\n            }\n            wdoc.write(content);\n            wdoc.close();\n            var printed = false;\n            var callPrint = function () {\n                if(printed) {\n                    return;\n                }\n                // Fix for IE : Allow it to render the iframe\n                frameWindow.focus();\n                try {\n                    // Fix for IE11 - printng the whole page instead of the iframe content\n                    if (!frameWindow.document.execCommand('print', false, null)) {\n                        // document.execCommand returns false if it failed -http://stackoverflow.com/a/21336448/937891\n                        frameWindow.print();\n                    }\n                    // focus body as it is losing focus in iPad and content not getting printed\n                    $('body').focus();\n                } catch (e) {\n                    frameWindow.print();\n                }\n                frameWindow.close();\n                printed = true;\n                def.resolve();\n            }\n            // Print once the frame window loads - seems to work for the new-window option but unreliable for the iframe\n            $(frameWindow).on(\"load\", callPrint);\n            // Fallback to printing directly if the frame doesn't fire the load event for whatever reason\n            setTimeout(callPrint, options.timeout);\n        } catch (err) {\n            def.reject(err);\n        }\n        return def;\n    }\n\n    function printContentInIFrame(content, options) {\n        var $iframe = $(options.iframe + \"\");\n        var iframeCount = $iframe.length;\n        if (iframeCount === 0) {\n            // Create a new iFrame if none is given\n            $iframe = $('<iframe height=\"0\" width=\"0\" border=\"0\" wmode=\"Opaque\"/>')\n                .prependTo('body')\n                .css({\n                    \"position\": \"absolute\",\n                    \"top\": -999,\n                    \"left\": -999\n                });\n        }\n        var frameWindow = $iframe.get(0);\n        return printFrame(frameWindow, content, options)\n            .done(function () {\n                // Success\n                setTimeout(function () {\n                    // Wait for IE\n                    if (iframeCount === 0) {\n                        // Destroy the iframe if created here\n                        $iframe.remove();\n                    }\n                }, 1000);\n            })\n            .fail(function (err) {\n                // Use the pop-up method if iframe fails for some reason\n                console.error(\"Failed to print from iframe\", err);\n                printContentInNewWindow(content, options);\n            })\n            .always(function () {\n                try {\n                    options.deferred.resolve();\n                } catch (err) {\n                    console.warn('Error notifying deferred', err);\n                }\n            });\n    }\n\n    function printContentInNewWindow(content, options) {\n        // Open a new window and print selected content\n        var frameWindow = window.open();\n        return printFrame(frameWindow, content, options)\n            .always(function () {\n                try {\n                    options.deferred.resolve();\n                } catch (err) {\n                    console.warn('Error notifying deferred', err);\n                }\n            });\n    }\n\n    function isNode(o) {\n        /* http://stackoverflow.com/a/384380/937891 */\n        return !!(typeof Node === \"object\" ? o instanceof Node : o && typeof o === \"object\" && typeof o.nodeType === \"number\" && typeof o.nodeName === \"string\");\n    }\n    $.print = $.fn.print = function () {\n        // Print a given set of elements\n        var options, $this, self = this;\n        // console.log(\"Printing\", this, arguments);\n        if (self instanceof $) {\n            // Get the node if it is a jQuery object\n            self = self.get(0);\n        }\n        if (isNode(self)) {\n            // If `this` is a HTML element, i.e. for\n            // $(selector).print()\n            $this = $(self);\n            if (arguments.length > 0) {\n                options = arguments[0];\n            }\n        } else {\n            if (arguments.length > 0) {\n                // $.print(selector,options)\n                $this = $(arguments[0]);\n                if (isNode($this[0])) {\n                    if (arguments.length > 1) {\n                        options = arguments[1];\n                    }\n                } else {\n                    // $.print(options)\n                    options = arguments[0];\n                    $this = $(\"html\");\n                }\n            } else {\n                // $.print()\n                $this = $(\"html\");\n            }\n        }\n        // Default options\n        var defaults = {\n            globalStyles: true,\n            mediaPrint: false,\n            stylesheet: null,\n            noPrintSelector: \".no-print\",\n            iframe: true,\n            append: null,\n            prepend: null,\n            manuallyCopyFormValues: true,\n            deferred: $.Deferred(),\n            timeout: 750,\n            title: null,\n            doctype: '<!doctype html>'\n        };\n        // Merge with user-options\n        options = $.extend({}, defaults, (options || {}));\n        var $styles = $(\"\");\n        if (options.globalStyles) {\n            // Apply the stlyes from the current sheet to the printed page\n            $styles = $(\"style, link, meta, base, title\");\n        } else if (options.mediaPrint) {\n            // Apply the media-print stylesheet\n            $styles = $(\"link[media=print]\");\n        }\n        if (options.stylesheet) {\n            // Add a custom stylesheet if given\n            $styles = $.merge($styles, $('<link rel=\"stylesheet\" href=\"' + options.stylesheet + '\">'));\n        }\n        // Create a copy of the element to print\n        var copy = $this.clone();\n        // Wrap it in a span to get the HTML markup string\n        copy = $(\"<span/>\")\n            .append(copy);\n        // Remove unwanted elements\n        copy.find(options.noPrintSelector)\n            .remove();\n        // Add in the styles\n        copy.append($styles.clone());\n        // Update title\n        if (options.title) {\n            var title = $(\"title\", copy);\n            if (title.length === 0) {\n                title = $(\"<title />\");\n                copy.append(title);                \n            }\n            title.text(options.title);            \n        }\n        // Appedned content\n        copy.append(getjQueryObject(options.append));\n        // Prepended content\n        copy.prepend(getjQueryObject(options.prepend));\n        if (options.manuallyCopyFormValues) {\n            // Manually copy form values into the HTML for printing user-modified input fields\n            // http://stackoverflow.com/a/26707753\n            copy.find(\"input\")\n                .each(function () {\n                    var $field = $(this);\n                    if ($field.is(\"[type='radio']\") || $field.is(\"[type='checkbox']\")) {\n                        if ($field.prop(\"checked\")) {\n                            $field.attr(\"checked\", \"checked\");\n                        }\n                    } else {\n                        $field.attr(\"value\", $field.val());\n                    }\n                });\n            copy.find(\"select\").each(function () {\n                var $field = $(this);\n                $field.find(\":selected\").attr(\"selected\", \"selected\");\n            });\n            copy.find(\"textarea\").each(function () {\n                // Fix for https://github.com/DoersGuild/jQuery.print/issues/18#issuecomment-96451589\n                var $field = $(this);\n                $field.text($field.val());\n            });\n        }\n        // Get the HTML markup string\n        var content = copy.html();\n        // Notify with generated markup & cloned elements - useful for logging, etc\n        try {\n            options.deferred.notify('generated_markup', content, copy);\n        } catch (err) {\n            console.warn('Error notifying deferred', err);\n        }\n        // Destroy the copy\n        copy.remove();\n        if (options.iframe) {\n            // Use an iframe for printing\n            try {\n                printContentInIFrame(content, options);\n            } catch (e) {\n                // Use the pop-up method if iframe fails for some reason\n                console.error(\"Failed to print from iframe\", e.stack, e.message);\n                printContentInNewWindow(content, options);\n            }\n        } else {\n            // Use a new window for printing\n            printContentInNewWindow(content, options);\n        }\n        return this;\n    };\n})(jQuery);\n"]}